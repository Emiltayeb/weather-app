{"version":3,"sources":["pages/Weather/WeatherDetail/weather-details.module.scss","Components/TemperatureDisplay/TemperatureDisplay.js","utils/generateBgClassFromTemperature.js","Components/TemperatureDisplay/TemperatureDisplay.module.scss","Components/CustomCard/CustomCard.js","Components/CustomCard/custom-card.module.scss","pages/Weather/WeatherDetail/FavACtion/FavoriteAction.js","pages/Weather/WeatherDetail/Forecast/forecast.module.scss","pages/Weather/WeatherForm/weatherForm.module.scss","pages/Weather/WeatherDetail/Forecast/ForecastItem.js","pages/Weather/WeatherDetail/Forecast/Forcast.js","pages/Weather/WeatherDetail/CityWeatherDataDisplay.js","pages/Weather/WeatherDetail/WeatherDataHoc.js","hooks/use-form.js","utils/checkIFInputIsInEnglish.js","pages/Weather/WeatherForm/WeatherForm.js","Components/Alert/Alert.js","pages/Weather/Weather.js"],"names":["module","exports","TemperatureDisplay","Temperature","currentSwitchColor","useGenerateTheme","currentTheme","primaryDark","primaryLight","useState","temState","setTempState","useEffect","Unit","Value","className","classes","root","toFixed","checked","onChange","e","stopPropagation","preTemState","switchTemType","onColor","offColor","handleDiameter","uncheckedIcon","checkedIcon","uncheckedHandleIcon","style","position","left","color","checkedHandleIcon","boxShadow","activeBoxShadow","height","width","id","generateBgClassFromTemperature","tempValue","CustomCard","header","cardContent","cardFooter","bgClass","customCardClass","customStyle","onCardClick","theme","useTheme","onClick","card","palette","type","item","FavoriteAction","isItemInFavorite","currentCityKey","dispatch","useDispatch","removeItemFromFavorites","_","addCityToFavorite","variant","size","DayOrNightButton","withStyles","fontSize","textTransform","Button","ForecastItem","forecastData","day","moment","Date","format","MinTemperature","Minimum","MaxTemperature","Maximum","dayOrNight","setDayOrNight","maxOrMin","setMaxOrMin","dayOrNightData","bgByTemp","content","src","Icon","alt","IconPhrase","prevState","footer","Forecast","forecasts","useSelector","dailyForecasts","map","forecast","EpochDate","React","memo","CityWeatherDataDisplay","mainWeatherData","cityName","country","currentWeatherInfo","WeatherIcon","WeatherText","bgFromTemp","Metric","condition","WeatherDataHoc","Key","isSavedToFav","reducer","state","action","value","isTouched","UseForm","validator","useReducer","isInputValid","hasErrors","onChangeHandler","target","onBlurHandler","reset","checkIFInputIsInEnglish","input","test","StyledTextField","borderColor","TextField","WeatherForm","optionsOpened","setOptionsOpened","isDataFetching","dataFetching","status","weatherSearchedItems","setWeatherSearchedItems","trim","length","onCitySearch","onCityBlur","handelSetOpen","timeOutId","setTimeout","a","handelAlerts","message","clearAlert","setDataFetching","getJSON","BASE_URL","process","items","Error","resetDataFetching","clearTimeout","form","Autocomplete","onFocus","onBlur","loading","options","getOptionSelected","option","fetchAllWeatherData","handelAutoCompleteChange","open","onOpen","onClose","renderOption","LocalizedName","Country","getOptionLabel","margin","zIndex","renderInput","params","label","TransitionAlerts","severity","setOpen","weatherErrors","alerts","Collapse","in","Fade","timeout","Alert","IconButton","aria-label","Weather","weatherData","weatherAlerts","spinnerMessage","getDefaultWeatherByLocation","bg","Spinner","text"],"mappings":"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","file":"static/js/4.946761a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorite-action\":\"weather-details_favorite-action__24u0-\",\"weather-data-container\":\"weather-details_weather-data-container__1GHlF\",\"dark\":\"weather-details_dark__3rpdb\",\"light\":\"weather-details_light__2_u4v\",\"current-weather-data-display\":\"weather-details_current-weather-data-display__w00Lj\",\"condition\":\"weather-details_condition__3YIGW\",\"header\":\"weather-details_header__1ZWRt\"};","import React, { useState, useEffect } from \"react\";\r\n\r\nimport classes from \"./TemperatureDisplay.module.scss\";\r\nimport Switch from \"react-switch\";\r\nimport { primaryDark, primaryLight } from \"../../config/config\";\r\nimport useGenerateTheme from \"../../hooks/use-generateTheme\";\r\n\r\nfunction TemperatureDisplay({ Temperature }) {\r\n  const { currentTheme } = useGenerateTheme();\r\n\r\n  const currentSwitchColor =\r\n    currentTheme === \"dark\" ? primaryDark : primaryLight;\r\n  const [temState, setTempState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { Unit, Value } = Temperature;\r\n    setTempState({\r\n      Unit,\r\n      Value,\r\n    });\r\n  }, [Temperature]);\r\n\r\n  const switchTemType = (checked, e) => {\r\n    e.stopPropagation();\r\n\r\n    setTempState((preTemState) => {\r\n      return preTemState.Unit === \"C\"\r\n        ? {\r\n            Unit: \"F\",\r\n            Value: preTemState.Value * 1.8 + 32,\r\n          }\r\n        : {\r\n            Unit: \"C\",\r\n            Value: (preTemState.Value - 32) / 1.8,\r\n          };\r\n    });\r\n  };\r\n  return (\r\n    temState && (\r\n      <div className={classes.root}>\r\n        <p className=\"is-size-5\">\r\n          {temState.Value.toFixed(2)} <span>&#xb0;</span>\r\n        </p>\r\n        <Switch\r\n          checked={temState.Unit === \"C\"}\r\n          onChange={(checked, e) => switchTemType(checked, e)}\r\n          onColor={currentSwitchColor}\r\n          offColor={currentSwitchColor}\r\n          handleDiameter={30}\r\n          uncheckedIcon={false}\r\n          checkedIcon={false}\r\n          uncheckedHandleIcon={\r\n            <span style={{ position: \"relative\", left: \"5px\", color: \"black\" }}>\r\n              &#8457;\r\n            </span>\r\n          }\r\n          checkedHandleIcon={\r\n            <span style={{ position: \"relative\", left: \"5px\", color: \"black\" }}>\r\n              {\" \"}\r\n              &#8451;\r\n            </span>\r\n          }\r\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n          activeBoxShadow=\"0px 0px 1px\r\n        10px rgba(0, 0, 0, 0.2)\"\r\n          height={20}\r\n          width={48}\r\n          className=\"react-switch\"\r\n          id=\"material-switch\"\r\n        />\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default TemperatureDisplay;\r\n","const generateBgClassFromTemperature = (tempValue) => {\r\n  let className;\r\n  if (tempValue > 20) className = \"warm\";\r\n  else if (tempValue >= 15) className = \"mid\";\r\n  else if (tempValue > 10) className = \"cold\";\r\n  else if (tempValue > 0) className = \"ice\";\r\n\r\n  return className;\r\n};\r\n\r\nexport default generateBgClassFromTemperature;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TemperatureDisplay_root__Hhdbz\"};","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport classes from \"./custom-card.module.scss\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst CustomCard = ({\r\n  header,\r\n  cardContent,\r\n  cardFooter,\r\n  bgClass,\r\n  customCardClass,\r\n  customStyle,\r\n  onCardClick = null,\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Card\r\n      style={customStyle}\r\n      onClick={onCardClick ? onCardClick : null}\r\n      className={`${classes.card} ${bgClass} ${customCardClass ?? \"\"}`}>\r\n      <div className={`${classes.header} ${classes[theme.palette.type]}`}>\r\n        <p>{header}</p>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <CardContent>{cardContent}</CardContent>\r\n        {cardFooter}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CustomCard;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"custom-card_card__3m5Ss\",\"header\":\"custom-card_header__2p7d6\",\"light\":\"custom-card_light__3b7Ai\",\"dark\":\"custom-card_dark__3-QbW\",\"item\":\"custom-card_item__1JupF\"};","import React from \"react\";\r\n\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport {\r\n  addCityToFavorite,\r\n  removeItemFromFavorites,\r\n} from \"../../../../store/weather\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport classes from \"../weather-details.module.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction FavoriteAction({ isItemInFavorite, currentCityKey }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddItemToFavorite = (_) => {\r\n    dispatch(addCityToFavorite());\r\n  };\r\n\r\n  const onRemoveItemToFavorite = (e) => {\r\n    e.stopPropagation();\r\n    dispatch(removeItemFromFavorites(currentCityKey));\r\n  };\r\n\r\n  return (\r\n    <div className={classes[\"favorite-action\"]}>\r\n      {isItemInFavorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n      <Button\r\n        onClick={\r\n          isItemInFavorite ? onRemoveItemToFavorite : onAddItemToFavorite\r\n        }\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        className=\"ml-3\">\r\n        {isItemInFavorite ? \"Remove from favourite\" : \"Add to Favorite\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FavoriteAction;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"forecast_root__2ywH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"weatherForm_form__38Lel\",\"search-container\":\"weatherForm_search-container__1pXqC\"};","import React, { useState } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport moment from \"moment\";\r\n\r\nimport TemperatureDisplay from \"../../../../Components/TemperatureDisplay/TemperatureDisplay\";\r\nimport CustomCard from \"../../../../Components/CustomCard/CustomCard\";\r\nimport generateBgClassFromTemperature from \"../../../../utils/generateBgClassFromTemperature\";\r\n\r\nconst DayOrNightButton = withStyles({\r\n  root: {\r\n    fontSize: \"0.8rem\",\r\n    textTransform: \"lowercase\",\r\n  },\r\n})(Button);\r\n\r\nconst ForecastItem = ({ forecastData }) => {\r\n  const day = moment(forecastData.Date).format(\"dddd\");\r\n\r\n  const { Minimum: MinTemperature, Maximum: MaxTemperature } =\r\n    forecastData.Temperature;\r\n\r\n  const [dayOrNight, setDayOrNight] = useState(\"Day\");\r\n  const [maxOrMin, setMaxOrMin] = useState(\"Min\");\r\n  const dayOrNightData = forecastData[dayOrNight];\r\n\r\n  const switchDatORNight = (_) =>\r\n    setDayOrNight((prevState) => (prevState === \"Day\" ? \"Night\" : \"Day\"));\r\n\r\n  const bgByTemp = generateBgClassFromTemperature(\r\n    maxOrMin === \"Min\" ? MinTemperature.Value : MaxTemperature.Value\r\n  );\r\n\r\n  const handelMaxOrMinClick = () => {\r\n    setMaxOrMin((prevState) => (prevState === \"Min\" ? \"Max\" : \"Min\"));\r\n  };\r\n\r\n  const content = (\r\n    <section className=\"is-flex\">\r\n      <img\r\n        src={`/weatherIcons/${dayOrNightData.Icon}.png`}\r\n        alt=\"day or night icon\"\r\n      />\r\n      <section className=\"has-text-centered\">\r\n        <p className=\"has-text-weight-bold\">{dayOrNightData.IconPhrase}</p>\r\n        <DayOrNightButton\r\n          size=\"small\"\r\n          onClick={switchDatORNight}\r\n          variant=\"contained\"\r\n          color=\"secondary\">\r\n          {dayOrNight}\r\n        </DayOrNightButton>\r\n      </section>\r\n    </section>\r\n  );\r\n\r\n  const footer = (\r\n    <section>\r\n      <div className=\"is-size-6 has-text-centered\">{maxOrMin} temperature</div>\r\n      <TemperatureDisplay\r\n        Temperature={maxOrMin === \"Min\" ? MinTemperature : MaxTemperature}\r\n      />{\" \"}\r\n      <Button\r\n        onClick={handelMaxOrMinClick}\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"secondary\">\r\n        Show {maxOrMin === \"Min\" ? \"Max\" : \"Min\"} temperature\r\n      </Button>\r\n    </section>\r\n  );\r\n  return (\r\n    <CustomCard\r\n      bgClass={bgByTemp}\r\n      header={day}\r\n      cardContent={content}\r\n      cardFooter={footer}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ForecastItem;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { dailyForecasts } from \"../../../../store/weather\";\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport classes from \"./forecast.module.scss\";\r\n\r\nconst Forecast = () => {\r\n  const forecasts = useSelector(dailyForecasts);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {forecasts.map((forecast) => (\r\n        <ForecastItem key={forecast.EpochDate} forecastData={forecast} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Forecast);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { currentWeatherInfo, mainWeatherData } from \"../../../store/weather\";\r\nimport RoomIcon from \"@material-ui/icons/Room\";\r\nimport classes from \"./weather-details.module.scss\";\r\nimport TemperatureDisplay from \"../../../Components/TemperatureDisplay/TemperatureDisplay\";\r\nimport generateBgClassFromTemperature from \"../../../utils/generateBgClassFromTemperature\";\r\n\r\nfunction CityWeatherDataDisplay() {\r\n  const { cityName, country } = useSelector(mainWeatherData);\r\n  const { Temperature, WeatherIcon, WeatherText } =\r\n    useSelector(currentWeatherInfo);\r\n\r\n  const bgFromTemp = generateBgClassFromTemperature(Temperature.Metric.Value);\r\n  return (\r\n    <div className={`${classes[\"current-weather-data-display\"]} ${bgFromTemp}`}>\r\n      <h2 className=\"is-size-3 is-size-5-mobile\">\r\n        <RoomIcon />\r\n        {cityName}, {country}\r\n      </h2>\r\n\r\n      <section className={classes.condition}>\r\n        <div className=\"is-flex is-align-items-center\">\r\n          <h2 className=\"is-size-2 is-size-6-mobile\">{WeatherText}</h2>\r\n          <figure>\r\n            <img\r\n              src={`/weatherIcons/${WeatherIcon}.png`}\r\n              alt=\"current weather icon\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <h3>\r\n          <TemperatureDisplay Temperature={Temperature.Metric} />\r\n        </h3>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityWeatherDataDisplay;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./weather-details.module.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { mainWeatherData } from \"../../../store/weather\";\r\nimport Forecast from \"./Forecast/Forcast\";\r\nimport CityWeatherDataDisplay from \"./CityWeatherDataDisplay\";\r\nimport FavoriteAction from \"./FavACtion/FavoriteAction\";\r\nimport { useTheme } from \"@material-ui/core\";\r\n\r\nfunction WeatherDataHoc() {\r\n  const theme = useTheme();\r\n  const { Key: currentCityKey, isSavedToFav } = useSelector(mainWeatherData);\r\n\r\n  return (\r\n    <div\r\n      className={`my-3 ${classes[\"weather-data-container\"]} ${\r\n        classes[theme.palette.type]\r\n      } `}>\r\n      <FavoriteAction\r\n        currentCityKey={currentCityKey}\r\n        isItemInFavorite={isSavedToFav}\r\n      />\r\n\r\n      <h2 className=\"is-size-3 is-size-5-mobile has-text-centered my-5 has-text-weight-semibold\">\r\n        Current Weater:\r\n      </h2>\r\n      <CityWeatherDataDisplay />\r\n      <h2 className=\"is-size-3 is-size-5-mobile has-text-centered my-5 has-text-weight-semibold\">\r\n        Upcoming 5 days Forecast:\r\n      </h2>\r\n      <Forecast />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDataHoc;\r\n","import { useReducer } from \"react\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.value,\r\n      };\r\n    case \"INPUT_BLUR\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n\r\n    case \"RESET\":\r\n      return {\r\n        value: \"\",\r\n        isTouched: false,\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\nfunction UseForm(validator) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    value: \"\",\r\n    isTouched: false,\r\n  });\r\n\r\n  const isInputValid = validator(state.value);\r\n\r\n  const hasErrors = !isInputValid && state.isTouched;\r\n\r\n  const onChangeHandler = (e) => {\r\n    dispatch({ type: \"INPUT_CHANGE\", value: e.target.value });\r\n  };\r\n  const onBlurHandler = (e) => {\r\n    dispatch({ type: \"INPUT_BLUR\" });\r\n  };\r\n  const reset = () => {\r\n    dispatch({ type: \"RESET\" });\r\n  };\r\n  return {\r\n    value: state.value,\r\n    isTouched: state.isTouched,\r\n    isInputValid,\r\n    onChangeHandler,\r\n    onBlurHandler,\r\n    hasErrors,\r\n    reset,\r\n  };\r\n}\r\n\r\nexport default UseForm;\r\n","function checkIFInputIsInEnglish(input) {\r\n  const reg = /^[a-z]+$/i;\r\n\r\n  return reg.test(input);\r\n}\r\n\r\nexport default checkIFInputIsInEnglish;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { BASE_URL } from \"../../../config/config\";\r\nimport UseForm from \"../../../hooks/use-form\";\r\n\r\nimport classes from \"./weatherForm.module.scss\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { withStyles } from \"@material-ui/core\";\r\nimport {\r\n  clearAlert,\r\n  handelAlerts,\r\n  fetchAllWeatherData,\r\n  setDataFetching,\r\n  dataFetching,\r\n  resetDataFetching,\r\n} from \"../../../store/weather\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport getJSON from \"../../../utils/getJSON\";\r\nimport checkIFInputIsInEnglish from \"../../../utils/checkIFInputIsInEnglish\";\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: theme.palette.type === \"dark\" ? \"white\" : \"black\",\r\n    },\r\n\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: theme.palette.type === \"dark\" ? \"white\" : \"black\",\r\n      },\r\n    },\r\n  },\r\n}))(TextField);\r\n\r\nfunction WeatherForm() {\r\n  const [optionsOpened, setOptionsOpened] = useState(false);\r\n\r\n  const { status: isDataFetching } = useSelector(dataFetching);\r\n\r\n  const [weatherSearchedItems, setWeatherSearchedItems] = useState([]);\r\n\r\n  const {\r\n    value: cityName,\r\n    onChangeHandler: onCitySearch,\r\n    onBlurHandler: onCityBlur,\r\n  } = UseForm((value) => value.trim().length > 0);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handelSetOpen = () => weatherSearchedItems.length > 0;\r\n\r\n  const onAutoCompleteFocous = (_) => {\r\n    if (handelSetOpen()) setOptionsOpened(true);\r\n  };\r\n\r\n  const handelCloseOptions = (_) => setOptionsOpened(false);\r\n\r\n  const handelOpenOptions = (_) => {\r\n    if (handelSetOpen()) setOptionsOpened(true);\r\n  };\r\n\r\n  const handelAutoCompleteChange = (option) => {\r\n    if (!option) return;\r\n\r\n    dispatch(fetchAllWeatherData(option));\r\n  };\r\n\r\n  // side effects\r\n  useEffect(() => {\r\n    const getSearchResultByCity = async () => {\r\n      if (cityName.length === 0) return;\r\n\r\n      if (!checkIFInputIsInEnglish(cityName)) {\r\n        dispatch(\r\n          handelAlerts({\r\n            message: \"Please search in english letters only\",\r\n            type: \"warning\",\r\n          })\r\n        );\r\n        return;\r\n      }\r\n\r\n      dispatch(clearAlert());\r\n      setOptionsOpened(false);\r\n\r\n      dispatch(\r\n        setDataFetching({\r\n          status: true,\r\n          message: \"Getting the cities for you..\",\r\n        })\r\n      );\r\n      try {\r\n        const items = await getJSON(\r\n          `${BASE_URL}/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_WEATHER_API}&q=${cityName} `\r\n        );\r\n        if (items.length === 0)\r\n          throw Error(\r\n            \"Opps!.. we couldnt find the city you asked for. try a different one?\"\r\n          );\r\n\r\n        setWeatherSearchedItems(items);\r\n        dispatch(resetDataFetching());\r\n        setOptionsOpened(true);\r\n      } catch (error) {\r\n        dispatch(resetDataFetching());\r\n\r\n        dispatch(\r\n          handelAlerts({\r\n            message: error.message,\r\n            type: \"error\",\r\n          })\r\n        );\r\n      }\r\n    };\r\n\r\n    const timeOutId = setTimeout(getSearchResultByCity, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timeOutId);\r\n    };\r\n  }, [cityName, dispatch]);\r\n\r\n  return (\r\n    <form className={classes.form}>\r\n      <label className=\"is-size-4\">Search for city weather:</label>\r\n      <Autocomplete\r\n        onFocus={onAutoCompleteFocous}\r\n        onBlur={onCityBlur}\r\n        loading={isDataFetching}\r\n        options={weatherSearchedItems}\r\n        getOptionSelected={(option, value) => option === value}\r\n        onChange={(e, option) => handelAutoCompleteChange(option)}\r\n        open={optionsOpened}\r\n        onOpen={handelOpenOptions}\r\n        onClose={handelCloseOptions}\r\n        renderOption={(option) => (\r\n          <span>\r\n            {option.LocalizedName},{option.Country.LocalizedName}\r\n          </span>\r\n        )}\r\n        getOptionLabel={(option) => option.LocalizedName}\r\n        style={{ width: \"100%\", margin: \"1rem 0\", zIndex: 0 }}\r\n        renderInput={(params) => (\r\n          <StyledTextField\r\n            {...params}\r\n            label=\"For example :Tel Aviv\"\r\n            variant=\"outlined\"\r\n            onChange={onCitySearch}\r\n          />\r\n        )}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { alerts, clearAlert } from \"../../store/weather\";\r\n\r\nexport default function TransitionAlerts({ severity = \"error\" }) {\r\n  const [open, setOpen] = React.useState(true);\r\n  const dispatch = useDispatch();\r\n\r\n  const weatherErrors = useSelector(alerts);\r\n\r\n  return (\r\n    <Collapse in={open}>\r\n      <Fade in={alerts.length > 0} timeout={500}>\r\n        <Alert\r\n          className=\"my-2\"\r\n          severity={weatherErrors.type}\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setOpen(false);\r\n                dispatch(clearAlert());\r\n              }}>\r\n              <CloseIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n          }>\r\n          {weatherErrors.message}\r\n        </Alert>\r\n      </Fade>\r\n    </Collapse>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  alerts,\r\n  dataFetching,\r\n  getDefaultWeatherByLocation,\r\n  mainWeatherData,\r\n} from \"../../store/weather\";\r\nimport WeatherDataHoc from \"./WeatherDetail/WeatherDataHoc\";\r\nimport WeatherForm from \"./WeatherForm/WeatherForm\";\r\nimport classes from \"./weather.module.scss\";\r\n\r\nimport Alert from \"../../Components/Alert/Alert\";\r\nimport Spinner from \"../../Components/Spinner/Spinner\";\r\n\r\nfunction Weather() {\r\n  const weatherData = useSelector(mainWeatherData);\r\n  const dispatch = useDispatch();\r\n  const weatherAlerts = useSelector(alerts);\r\n\r\n  const { status: isDataFetching, message: spinnerMessage } =\r\n    useSelector(dataFetching);\r\n  useEffect(() => {\r\n    if (weatherData) return;\r\n\r\n    dispatch(getDefaultWeatherByLocation());\r\n  }, [dispatch, weatherData]);\r\n\r\n  return (\r\n    <div className={classes.bg}>\r\n      <div className=\"section container\">\r\n        <WeatherForm />\r\n        {weatherAlerts && <Alert />}\r\n        {isDataFetching && <Spinner text={spinnerMessage} />}\r\n        {weatherData && <WeatherDataHoc />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n"],"sourceRoot":""}